"︠30948c53-04c4-4702-a181-b5dcd0253af3s︠\nload(\"4agents.sage\")\n︡4c1f1605-2089-409d-9b8b-210ae8561fd1︡︡{\"stdout\":\"class Pref defined.\\n\",\"done\":false}︡{\"done\":true}\n︠6526f052-d624-4a3c-afad-962cbf725d4es︠\nprove_4pieces()\n︡eb8b7e2a-0a8c-454c-bd64-c0666ec579f5︡︡{\"stdout\":\"Initially, agent a cuts four equal pieces:  1,2,3,4 .\\nAssume w.l.o.g. that b's preferences are 1<2<3<4 .\\nConsider the following 24 cases regarding the preferences of c:\\n\\nCASE 1 OF 24 : c's order is 4<3<2<1 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 2 OF 24 : c's order is 4<3<1<2 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 3 OF 24 : c's order is 4<2<3<1 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 4 OF 24 : c's order is 4<2<1<3 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This must fail because of c.\\n    c:Equalize(2) makes c's best pieces: 1=3c. This always succeeds.\\n\\nCASE 5 OF 24 : c's order is 4<1<3<2 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 6 OF 24 : c's order is 4<1<2<3 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This must fail because of c.\\n    c:Equalize(2) makes c's best pieces: 2=3c. This always succeeds.\\n\\nCASE 7 OF 24 : c's order is 3<4<2<1 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 8 OF 24 : c's order is 3<4<1<2 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 9 OF 24 : c's order is 3<2<4<1 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 10 OF 24 : c's order is 3<2<1<4 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) makes c's best pieces: 1=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 11 OF 24 : c's order is 3<1<4<2 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 12 OF 24 : c's order is 3<1<2<4 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) makes c's best pieces: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 13 OF 24 : c's order is 2<4<3<1 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 14 OF 24 : c's order is 2<4<1<3 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This must fail because of c.\\n    c:Equalize(2) makes c's best pieces: 1=3c. This always succeeds.\\n\\nCASE 15 OF 24 : c's order is 2<3<4<1 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 16 OF 24 : c's order is 2<3<1<4 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) makes c's best pieces: 1=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 17 OF 24 : c's order is 2<1<4<3 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This must fail because of c.\\n    c:Equalize(2) makes c's best pieces: 4=3c. This must fail because of b.\\n      b:Equalize(3) makes b's best pieces: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) makes c's best pieces: 1=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\\n\\nCASE 18 OF 24 : c's order is 2<1<3<4 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) makes c's best pieces: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 2 1 4c .\\n     Assume the case   b prefers 3 to 2 1 4c. Then:\\n      b:Equalize(3) makes b's best pieces: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) makes c's best pieces: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) makes c's best pieces: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 2 1 3 .\\n     Assume the case   b prefers 4c to 2 1 3. Then:\\n      b:Equalize(3) makes b's best pieces: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) makes c's best pieces: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n\\nCASE 19 OF 24 : c's order is 1<4<3<2 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 20 OF 24 : c's order is 1<4<2<3 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This must fail because of c.\",\"done\":false}︡{\"stdout\":\"\\n    c:Equalize(2) makes c's best pieces: 2=3c. This always succeeds.\\n\\nCASE 21 OF 24 : c's order is 1<3<4<2 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This always succeeds.\\n\\nCASE 22 OF 24 : c's order is 1<3<2<4 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) makes c's best pieces: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 23 OF 24 : c's order is 1<2<4<3 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This must fail because of c.\\n    c:Equalize(2) makes c's best pieces: 4=3c. This must fail because of b.\\n      b:Equalize(3) makes b's best pieces: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) makes c's best pieces: 2=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\\n\\nCASE 24 OF 24 : c's order is 1<2<3<4 :\\n  b:Equalize(2) makes b's best pieces: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) makes c's best pieces: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 1 2 4c .\\n     Assume the case   b prefers 3 to 1 2 4c. Then:\\n      b:Equalize(3) makes b's best pieces: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) makes c's best pieces: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) makes c's best pieces: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 1 2 3 .\\n     Assume the case   b prefers 4c to 1 2 3. Then:\\n      b:Equalize(3) makes b's best pieces: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) makes c's best pieces: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n\\nQ.E.D!\\n\",\"done\":false}︡{\"done\":true}\n︠fd82f05e-4e57-455e-bf7c-716831577f67︠\n\n\n\n\n\n\n\n\n\n"
{"patch":[[[[0,"bf725d4e"],[1,"i"],[0,"s︠\nprove"]],191,191,16,17]],"time":1446929189490}
{"patch":[[[[0,"bf725d4e"],[-1,"i"],[0,"s︠\nprove"]],191,191,17,16]],"time":1446929144488}
{"patch":[[[[0,"d0253af3"],[-1,"s"],[1,"r"],[0,"︠\nload(\""]],29,29,17,17],[[[0,"\":false}"],[-1,"︡{\"done\":true}"],[0,"\n︠6526f0"]],139,139,30,16],[[[0,"bf725d4e"],[-1,"s"],[0,"︠\nprove_"]],177,177,17,16],[[[0,"()\n︡"],[-1,"eb8b7e2a-0a8c-454c-bd64-c0666ec579f5"],[1,"707e8b82-b1d9-4e64-8895-5b6d28a621af"],[0,"︡︡{\""]],200,200,44,44],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],467,467,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],492,492,32,36],[[[0,"eds."],[-1,"\",\"done\":false}︡{\"stdout\":\""],[0,"\\n\\n"]],537,537,35,8],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],585,585,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],610,610,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],703,703,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],728,728,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],821,821,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This mus"]],846,846,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],907,907,36,41],[[[0," c's best pieces"],[1," are"],[0,": 1=3c. This alw"]],932,932,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],1025,1025,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],1050,1050,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],1143,1143,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This mus"]],1168,1168,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],1229,1229,36,41],[[[0," c's best pieces"],[1," are"],[0,": 2=3c. This alw"]],1254,1254,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],1347,1347,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],1372,1372,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],1465,1465,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],1490,1490,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],1583,1583,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],1608,1608,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],1702,1702,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This may"]],1727,1727,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],1860,1860,36,41],[[[0," c's best pieces"],[1," are"],[0,": 1=4c, so globa"]],1885,1885,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],2000,2000,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],2025,2025,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],2119,2119,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This may"]],2144,2144,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],2277,2277,36,41],[[[0," c's best pieces"],[1," are"],[0,": 2=4c, so globa"]],2302,2302,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],2417,2417,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],2442,2442,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],2536,2536,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This mus"]],2561,2561,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],2622,2622,36,41],[[[0," best pieces"],[1," are"],[0,": 1=3c. This"]],2651,2651,24,28],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],2741,2741,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],2766,2766,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],2860,2860,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This may"]],2885,2885,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],3018,3018,36,41],[[[0," best pieces"],[1," are"],[0,": 1=4c, so g"]],3047,3047,24,28],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],3158,3158,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This mus"]],3183,3183,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],3244,3244,36,41],[[[0," c's best pieces"],[1," are"],[0,": 4=3c. This mus"]],3269,3269,32,36],[[[0," b:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],3332,3332,36,41],[[[0," b's best pieces"],[1," are"],[0,": 2=3bb=4bb. Thi"]],3357,3357,32,36],[[[0," c:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],3509,3509,36,41],[[[0," best pieces"],[1," are"],[0,": 1=4cc=3cc,"]],3538,3538,24,28],[[[0,"always succeeds."],[1,"\",\"done\":false}︡{\"stdout\":\""],[0,"\\n\\nCASE 18 OF 2"]],3603,3603,32,59],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],3691,3691,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This may"]],3716,3716,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],3874,3874,36,41],[[[0," c's best pieces"],[1," are"],[0,": 3=4c, so globa"]],3899,3899,32,36],[[[0," b:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],4057,4057,36,41],[[[0," b's best pieces"],[1," are"],[0,": 2=3bb=4bb. Thi"]],4082,4082,32,36],[[[0," c:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],4234,4234,36,41],[[[0," c's best pieces"],[1," are"],[0,": 1=3cc=4cc, so "]],4259,4259,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],4400,4400,36,41],[[[0," c's best pieces"],[1," are"],[0,": 3=4c, so globa"]],4425,4425,32,36],[[[0," b:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],4583,4583,36,41],[[[0," b's best pieces"],[1," are"],[0,": 2=3bb=4bb. Thi"]],4608,4608,32,36],[[[0," c:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],4760,4760,36,41],[[[0,"t pieces"],[1," are"],[0,": 1=3cc="]],4793,4793,16,20],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],4915,4915,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],4940,4940,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],5034,5034,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This mus"]],5059,5059,32,36],[[[0,"f c."],[-1,"\",\"done\":false}︡{\"stdout\":\""],[0,"\\n  "]],5111,5111,35,8],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],5120,5120,36,41],[[[0," best pieces"],[1," are"],[0,": 2=3c. This"]],5149,5149,24,28],[[[0,"always succeeds."],[1,"\",\"done\":false}︡{\"stdout\":\""],[0,"\\n\\nCASE 21 OF 2"]],5178,5178,32,59],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],5266,5266,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This alw"]],5291,5291,32,36],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],5385,5385,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This may"]],5410,5410,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],5543,5543,36,41],[[[0," best pieces"],[1," are"],[0,": 2=4c, so g"]],5572,5572,24,28],[[[0," b:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],5683,5683,36,41],[[[0," b's best pieces"],[1," are"],[0,": 3=4b. This mus"]],5708,5708,32,36],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],5769,5769,36,41],[[[0,"t pieces"],[1," are"],[0,": 4=3c. "]],5802,5802,16,20],[[[0," b:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],5857,5857,36,41],[[[0," b's best pieces"],[1," are"],[0,": 2=3bb=4bb. Thi"]],5882,5882,32,36],[[[0," c:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],6034,6034,36,41],[[[0," best pieces"],[1," are"],[0,": 2=4cc=3cc,"]],6063,6063,24,28],[[[0,"ize(2) m"],[-1,"akes"],[1,"eans that"],[0," b's bes"]],6197,6197,20,25],[[[0," best pieces"],[1," are"],[0,": 3=4b. This"]],6218,6218,24,28],[[[0," c:Equalize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],6372,6372,36,41],[[[0," c's best pieces"],[1," are"],[0,": 3=4c, so globa"]],6397,6397,32,36],[[[0," b:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," b's best pieces"]],6555,6555,36,41],[[[0," b's best pieces"],[1," are"],[0,": 2=3bb=4bb. Thi"]],6580,6580,32,36],[[[0," c:Equalize(3) m"],[-1,"akes"],[1,"eans that"],[0," c's best pieces"]],6732,6732,36,41],[[[0," c's best pieces"],[1," are"],[0,": 2=3cc=4cc, so "]],6757,6757,32,36],[[[0,"always succeeds."],[1,"\",\"done\":false}︡{\"stdout\":\""],[0,"\\n   Assume the "]],6826,6826,32,59],[[[0,"ize(2) m"],[-1,"akes"],[1,"eans that"],[0," c's bes"]],6933,6933,20,25],[[[0,"t pieces"],[1," are"],[0,": 3=4c, "]],6958,6958,16,20],[[[0,"ize(3) m"],[-1,"akes"],[1,"eans that"],[0," b's bes"]],7116,7116,20,25],[[[0," best pieces"],[1," are"],[0,": 2=3bb=4bb."]],7137,7137,24,28],[[[0,"3) m"],[-1,"akes"],[1,"eans that"],[0," c's"]],7297,7297,12,17],[[[0,"t pieces"],[1," are"],[0,": 2=3cc="]],7318,7318,16,20]],"time":1446929062638}
{"patch":[[[[0,"3af3"],[-1,"r"],[0,"︠\n"],[1,""],[0,"load"]],33,33,11,10],[[[0,"\")\n︡"],[-1,"4c1f1605-2089-409d-9b8b-210ae8561fd1"],[1,"afa93367-0433-48b8-906a-571d634d0f6f"],[0,"︡︡{\""]],57,57,44,44],[[[0,"\":false}"],[1,"︡{\"done\":true}"],[0,"\n︠6526f0"]],138,138,16,30]],"time":1446929061503}
{"patch":[[[[0,"bf725d4e"],[1,"s"],[0,"︠\nprove_"]],190,190,16,17]],"time":1446929054775}
{"patch":[[[[0,"bf725d4e"],[-1,"s"],[0,"︠\n"],[1,""],[0,"prove_4p"]],191,191,19,18],[[[0,"()\n︡"],[-1,"707e8b82-b1d9-4e64-8895-5b6d28a621af︡︡{\"stdout\":\"Initially, agent a cuts four equal pieces:  1,2,3,4 .\\nAssume w.l.o.g. that b's preferences are 1<2<3<4 .\\nConsider the following 24 cases regarding the preferences of c:\\n\\nCASE 1 OF 24 : c's order is 4<3<2<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 2 OF 24 : c's order is 4<3<1<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 3 OF 24 : c's order is 4<2<3<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 4 OF 24 : c's order is 4<2<1<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 1=3c. This always succeeds.\\n\\nCASE 5 OF 24 : c's order is 4<1<3<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 6 OF 24 : c's order is 4<1<2<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 2=3c. This always succeeds.\\n\\nCASE 7 OF 24 : c's order is 3<4<2<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 8 OF 24 : c's order is 3<4<1<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 9 OF 24 : c's order is 3<2<4<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 10 OF 24 : c's order is 3<2<1<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 1=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 11 OF 24 : c's order is 3<1<4<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 12 OF 24 : c's order is 3<1<2<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 13 OF 24 : c's order is 2<4<3<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 14 OF 24 : c's order is 2<4<1<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 1=3c. This always succeeds.\\n\\nCASE 15 OF 24 : c's order is 2<3<4<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 16 OF 24 : c's order is 2<3<1<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 1=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 17 OF 24 : c's order is 2<1<4<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 4=3c. This must fail because of b.\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 18 OF 24 : c's order is 2<1<3<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 2 1 4c .\\n     Assume the case   b prefers 3 to 2 1 4c. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 2 1 3 .\\n     Assume the case   b prefers 4c to 2 1 3. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n\\nCASE 19 OF 24 : c's order is 1<4<3<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 20 OF 24 : c's order is 1<4<2<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 2=3c. This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 21 OF 24 : c's order is 1<3<4<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 22 OF 24 : c's order is 1<3<2<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 23 OF 24 : c's order is 1<2<4<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 4=3c. This must fail because of b.\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\\n\\nCASE 24 OF 24 : c's order is 1<2<3<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 1 2 4c .\\n     Assume the case   b prefers 3 to 1 2 4c. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 1 2 3 .\\n     Assume the case   b prefers 4c to 1 2 3. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n\\nQ.E.D!\\n\",\"done\":false"],[1,"e75778cf-09e1-45cd-95eb-e0e92b6a1ef7︡︡{\"done\":false,\"stderr\":\"Error in lines 1-1\\nTraceback (most recent call last):\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_server.py\\\", line 905, in execute\\n    exec compile(block+'\\\\n', '', 'single') in namespace, locals\\n  File \\\"\\\", line 1, in <module>\\nNameError: name 'prove_4agents' is not defined\\n\""],[0,"}︡{\""]],214,214,7225,393]],"time":1446582265236}
{"patch":[[[[0,"ve_4"],[-1,"pieces"],[0,"()\n︡"]],204,204,14,8]],"time":1446582263920}
{"patch":[[[[0,"25d4e︠\np"],[-1,"rove_4"],[0,"()\n︡e757"]],194,194,22,16]],"time":1446582262884}
{"patch":[[[[0,"5d4e"],[1,"s"],[0,"︠\np"],[1,"rove_4agents"],[0,"()\n︡"]],195,195,11,24]],"time":1446582261880}
{"patch":[[[[0,"bf725d4e"],[-1,"s"],[1,"r"],[0,"︠\nprove_"]],191,191,17,17],[[[0,"ef7︡"],[-1,"︡{\"done\":false,\"stderr\":\"Error in lines 1-1\\nTraceback (most recent call last):\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_server.py\\\", line 905, in execute\\n    exec compile(block+'\\\\n', '', 'single') in namespace, locals\\n  File \\\"\\\", line 1, in <module>\\nNameError: name 'prove_4agents' is not defined\\n\"}︡{\"done\":true}"],[0,"\n︠fd"]],252,252,371,8]],"time":1446582228729}
{"patch":[[[[0,"bf725d4e"],[-1,"r"],[0,"︠\nprove_"]],191,191,17,16],[[[0,"ents"],[-1,"()\n︡e75778cf-09e1-45cd-95eb-e0e92b6a1ef7︡\n︠fd82f05e-4e57-455e-bf7c-716831577f67︠"],[0,"\n\n\n\n"]],210,210,88,8]],"time":1446582227748}
{"patch":[[[[0,"︠\nprove_"],[-1,"4agents"],[0,"\n\n\n\n\n\n\n\n"]],199,199,23,16]],"time":1446582226744}
{"patch":[[[[0,"\npro"],[-1,"ve_\n"],[0,"\n\n\n\n"]],200,200,12,8]],"time":1446582225743}
{"patch":[[[[0,"e︠\np"],[-1,"ro"],[0,"\n\n\n\n"]],198,198,10,8]],"time":1446582224745}
{"patch":[[[[0,"4e︠\n"],[-1,"p"],[0,"\n\n\n\n"]],197,197,9,8]],"time":1446582223698}
{"patch":[[[[0,"d0253af3"],[-1,"s"],[1,"r"],[0,"︠\nload(\""]],29,29,17,17],[[[0,"lse}"],[-1,"︡{\"done\":true}"],[0,"\n︠65"]],143,143,22,8]],"time":1446582222715}
{"patch":[[[[0,"d0253af3"],[-1,"r"],[0,"︠\nload(\""]],29,29,17,16],[[[0,"e\")\n"],[-1,"︡afa93367-0433-48b8-906a-571d634d0f6f︡︡{\"stdout\":\"class Pref defined.\\n\",\"done\":false}\n"],[0,"︠652"]],56,56,95,8]],"time":1446582221483}
{"patch":[[[[0,".sage\")\n"],[1,"\n"],[0,"︠6526f05"]],52,52,16,17]],"time":1446582218890}
{"patch":[[[[0,".sage\")\n"],[-1,"\n"],[0,"︠6526f05"]],52,52,17,16]],"time":1446582217723}
{"patch":[[[[0,"s.sage\")"],[-1,"\n"],[0,"︠6526f05"]],51,51,17,16]],"time":1446582216544}
{"patch":[[[[0,"s.sage\")"],[1,"\n"],[0,"︠6526f05"]],51,51,16,17]],"time":1446582215291}
{"patch":[[[[0,"s.sage\")"],[-1,"\n"],[0,"︠6526f05"]],51,51,17,16]],"time":1446582214092}
{"patch":[[[[0,"s.sage\")"],[1,"\nprove_4pieces()\n︡e5447e2f-b38e-42ae-bbb9-088320108027︡︡{\"stdout\":\"Initially, agent a cuts four equal pieces:  1,2,3,4 .\\nAssume w.l.o.g. that b's preferences are\",\"done\":false}︡{\"stdout\":\" 1<2<3<4 .\\nConsider the following 24 cases regarding the preferences of c:\\n\\nCASE 1 OF 24 : c's order is 4<3<2<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 2 OF 24 : c's order is 4<3<1<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 3 OF 24 : c's order is 4<2<3<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 4 OF 24 : c's order is 4<2<1<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 1=3c. This always succeeds.\\n\\nCASE 5 OF 24 : c's order is 4<1<3<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 6 OF 24 : c's order is 4<1<2<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 2=3c. This always succeeds.\\n\\nCASE 7 OF 24 : c's order is 3<4<2<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 8 OF 24 : c's order is 3<4<1<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 9 OF 24 : c's order is 3<2<4<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 10 OF 24 : c's order is 3<2<1<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 1=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 11 OF 24 : c's order is 3<1<4<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 12 OF 24 : c's order is 3<1<2<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 13 OF 24 : c's order is 2<4<3<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 14 OF 24 : c's order is 2<4<1<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 1=3c. This always succeeds.\\n\\nCASE 15 OF 24 : c's order is 2<3<4<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 16 OF 24 : c's order is 2<3<1<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 1=4c, so globally: 4c<4b . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 17 OF 24 : c's order is 2<1<4<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 4=3c. This must fail because of b.\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\\n\\nCASE 18 OF 24 : c's order is 2<1<3<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 2 1 4c .\\n     Assume the case   b prefers 3 to 2 1 4c. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 2 1 3 .\\n     Assume the case   b prefers 4c to 2 1 3. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n\\nCASE 19 OF 24 : c's order is 1<4<3<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 20 OF 24 : c's order is 1<4<2<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 2=3c. This always succeeds.\\n\\nCASE 21 OF 24 : c's order is 1<3<4<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 22 OF 24 : c's order is 1<3<2<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 23 OF 24 : c's order is 1<2<4<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 4=3c. This must fail because of b.\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 24 OF 24 : c's order is 1<2<3<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 1 2 4c .\\n     Assume the case   b prefers 3 to 1 2 4c. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 1 2 3 .\\n     Assume the case   b prefers 4c to 1 2 3. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nQ.E.D!\\n\",\"done\":false}︡{\"done\":true}\n"],[0,"︠6526f05"]],51,51,16,7348]],"time":1446582212838}
{"patch":[[[[0,".sage\")\n"],[1,"\n"],[0,"prove_4p"]],52,52,16,17]],"time":1446582210095}
{"patch":[[[[0,"sage\")\n\n"],[1,"\n"],[0,"prove_4p"]],53,53,16,17]],"time":1446582209054}
{"patch":[[[[0,"sage\")\n\n"],[1,"︠b8740ad2-6f6f-47b1-9b82-66c813cec97c︠\n"],[0,"\nprove_4"]],53,53,16,55]],"time":1446582208094}
{"patch":[[[[0,"cec97c︠\n"],[1,"︠d66f0a5d-e691-41ba-89b8-d15225264566is︠"],[0,"\nprove_4"]],92,92,16,56]],"time":1446582207056}
{"patch":[[[[0,".sage\")\n"],[1,"︠5f9b0225-7cdc-4801-ae10-22cc1c14d08d︠"],[0,"\n︠b8740a"]],52,52,16,54]],"time":1446582196030}
{"patch":[[[[0,"e\")\n"],[-1,"︠61ff095d-3dbe-4e82-94e7-dc6f84728d5c︠\n"],[0,"︠b87"]],56,56,47,8]],"time":1446582195025}
{"patch":[[[[0,"s.sage\")"],[-1,"\n"],[0,"︠b8740ad"]],51,51,17,16]],"time":1446582193991}
{"patch":[[[[0,"d0253af3"],[1,"s"],[0,"︠\nload(\""]],29,29,16,17],[[[0,"s.sage\")"],[1,"\n︡2c71f3e2-463b-49c2-956f-ecd02f015f47︡︡{\"stdout\":\"class Pref defined.\",\"done\":false}︡{\"stdout\":\"\\n\",\"done\":false}︡{\"done\":true}\n︠d8e1cfbe-b394-42c8-bee7-478989711547︠\n"],[0,"︠b8740ad"]],52,52,16,184]],"time":1446582193016}
{"patch":[[[[0,"711547︠\n"],[1,"︠26e8103d-5315-4a57-9da6-fc1a6f36c5fe︠\n︠05741899-27a9-42ae-b6fa-649db4da6b8e︠"],[0,"︠b8740ad"]],220,220,16,93]],"time":1446582191976}
{"patch":[[[[0,"4da6b8e︠"],[1,"\n"],[0,"︠b8740ad"]],297,297,16,17]],"time":1446582191008}
{"patch":[[[[0,"da6b8e︠\n"],[1,"prove_4agents()\n"],[0,"︠b8740ad"]],298,298,16,32]],"time":1446582189968}
{"patch":[[[[0,"36c5fe︠\n"],[1,"\n"],[0,"︠0574189"]],259,259,16,17]],"time":1446582188128}
{"patch":[[[[0,"711547︠\n"],[1,"\n"],[0,"︠26e8103"]],220,220,16,17]],"time":1446582187092}
{"patch":[[[[0,"7︠\n\n"],[-1,"︠26e8103d-5315-4a57-9da6-fc1a6f36c5fe︠\n\n"],[0,"︠057"]],225,225,48,8]],"time":1446582186121}
{"patch":[[[[0,"cec97c︠\n"],[1,"\n"],[0,"︠d66f0a5"]],315,315,16,17]],"time":1446582185032}
{"patch":[[[[0,"s()\n"],[-1,"︠7eba5c71-479e-4ef6-9244-53b4eb7e9d71︠\n\n"],[0,"︠d66"]],280,280,48,8],[[[0,"25d4e︠\n\n"],[-1,"\n\n\n\n\n\n\n\n"]],7688,7688,16,8]],"time":1446582183821}
{"patch":[[[[0,"ue}\n"],[-1,"︠d8e1cfbe-b394-42c8-bee7-478989711547︠\n\n"],[0,"︠057"]],185,185,48,8]],"time":1446582182499}
{"patch":[[[[0,"e_4a"],[-1,"gents()"],[0,"\n︠d6"]],232,232,15,8]],"time":1446582180793}
{"patch":[[[[0,"︠\nprove_"],[-1,"4a"],[0,"\n︠d66f0a"]],226,226,18,16]],"time":1446582179756}
{"patch":[[[[0,"a6b8e︠\np"],[-1,"rove_"],[0,"\n︠d66f0a"]],221,221,21,16]],"time":1446582178736}
{"patch":[[[[0,"da6b8e︠\n"],[-1,"p"],[0,"\n︠d66f0a"]],220,220,17,16]],"time":1446582177697}
{"patch":[[[[0,"ue}\n"],[-1,"︠05741899-27a9-42ae-b6fa-649db4da6b8e︠\n\n"],[0,"︠d66"]],185,185,48,8]],"time":1446582173852}
{"patch":[[[[0,"25264566"],[-1,"i"],[0,"s︠\nprove"]],218,218,17,16]],"time":1446581911152}
{"patch":[[[[0,"25264566"],[-1,"s"],[1,"r"],[0,"︠\nprove_"]],218,218,17,17],[[[0,"ieces()\n"],[1,""],[0,"︡e5447e2"]],237,237,16,16],[[[0,"lse}"],[-1,"︡{\"stdout\":\" 1<2<3<4 .\\nConsider the following 24 cases regarding the preferences of c:\\n\\nCASE 1 OF 24 : c's order is 4<3<2<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 2 OF 24 : c's order is 4<3<1<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 3 OF 24 : c's order is 4<2<3<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 4 OF 24 : c's order is 4<2<1<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 1=3c. This always succeeds.\\n\\nCASE 5 OF 24 : c's order is 4<1<3<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 6 OF 24 : c's order is 4<1<2<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 2=3c. This always succeeds.\\n\\nCASE 7 OF 24 : c's order is 3<4<2<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 8 OF 24 : c's order is 3<4<1<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 9 OF 24 : c's order is 3<2<4<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 10 OF 24 : c's order is 3<2<1<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 1=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 11 OF 24 : c's order is 3<1<4<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 12 OF 24 : c's order is 3<1<2<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 13 OF 24 : c's order is 2<4<3<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 14 OF 24 : c's order is 2<4<1<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 1=3c. This always succeeds.\\n\\nCASE 15 OF 24 : c's order is 2<3<4<1 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 16 OF 24 : c's order is 2<3<1<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 1=4c, so globally: 4c<4b . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 17 OF 24 : c's order is 2<1<4<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 4=3c. This must fail because of b.\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\\n\\nCASE 18 OF 24 : c's order is 2<1<3<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 2 1 4c .\\n     Assume the case   b prefers 3 to 2 1 4c. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 2 1 3 .\\n     Assume the case   b prefers 4c to 2 1 3. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 1 to 2 3bb 4bb .\\n       Assume the case   c prefers 1 to 2 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 1=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n\\nCASE 19 OF 24 : c's order is 1<4<3<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 20 OF 24 : c's order is 1<4<2<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 2=3c. This always succeeds.\\n\\nCASE 21 OF 24 : c's order is 1<3<4<2 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This always succeeds.\\n\\nCASE 22 OF 24 : c's order is 1<3<2<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 1 case : c prefers 4b to 1 2 3 .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 2=4c, so globally: 4c<4b . This always succeeds.\\n\\nCASE 23 OF 24 : c's order is 1<2<4<3 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This must fail because of c.\\n    c:Equalize(2) means that c's best pieces are: 4=3c. This must fail because of b.\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=4cc=3cc, so globally: 4bb<4cc 3bb<3cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nCASE 24 OF 24 : c's order is 1<2<3<4 :\\n  b:Equalize(2) means that b's best pieces are: 3=4b. This may fail in 2 cases : c prefers 4b to 1 2 3;  c prefers 3 to 1 2 4b .\\n   Assume the case   c prefers 4b to 1 2 3. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4c<4b . This may fail in 1 case : b prefers 3 to 1 2 4c .\\n     Assume the case   b prefers 3 to 1 2 4c. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\\n   Assume the case   c prefers 3 to 1 2 4b. Then:\\n    c:Equalize(2) means that c's best pieces are: 3=4c, so globally: 4b<4c . This may fail in 1 case : b prefers 4c to 1 2 3 .\\n     Assume the case   b prefers 4c to 1 2 3. Then:\\n      b:Equalize(3) means that b's best pieces are: 2=3bb=4bb. This may fail in 1 case : c prefers 2 to 1 3bb 4bb .\\n       Assume the case   c prefers 2 to 1 3bb 4bb. Then:\\n        c:Equalize(3) means that c's best pieces are: 2=3cc=4cc, so globally: 3bb<3cc 4bb<4cc . This always succeeds.\",\"done\":false}︡{\"stdout\":\"\\n\\nQ.E.D!\\n\",\"done\":false}︡{\"done\":true}"],[0,"\n︠65"]],401,401,7162,8]],"time":1446581897213}
{"patch":[[[[0,"25264566"],[-1,"r"],[0,"︠\nprove_"]],218,218,17,16],[[[0,"s()\n"],[-1,"︡e5447e2f-b38e-42ae-bbb9-088320108027︡︡{\"stdout\":\"Initially, agent a cuts four equal pieces:  1,2,3,4 .\\nAssume w.l.o.g. that b's preferences are\",\"done\":false}\n︠6526f052-d624-4a3c-afad-962cbf725d4e︠\n\n"]],240,240,205,4]],"time":1446581896163}
{"patch":[[[[0,"ieces()\n"],[1,"\n"]],236,236,8,9]],"time":1446581894720}
{"patch":[[[[0,"ieces()\n"],[-1,"\n"]],236,236,9,8]],"time":1446581893216}
{"patch":[[[[0,"eces"],[-1,"()"],[0,"\n"]],237,237,7,5]],"time":1446581891216}
{"patch":[[[[0,"66︠\n"],[-1,"prove_4pieces"],[0,"\n"]],224,224,18,5]],"time":1446581890186}
{"patch":[[[[0,"d0253af3"],[1,"r"],[0,"s︠\nload("]],29,29,16,17],[[[0,"lse}"],[-1,"︡{\"stdout\":\"\\n\",\"done\":false}︡{\"done\":true}"],[0,"\n︠d6"]],142,142,51,8]],"time":1446581280652}
{"patch":[[[[0,"3af3"],[-1,"r"],[0,"s︠\n"],[1,""],[0,"load"]],33,33,12,11],[[[0,"\")\n︡"],[-1,"2c71f3e2-463b-49c2-956f-ecd02f015f47︡︡{\"stdout\":\"class Pref defined.\",\"done\":fals"],[1,"cb0122d7-1e71-4608-838e-a19215d9e572︡︡{\"stdout\":\"class Pref defined.\\n\",\"done\":false}︡{\"done\":false,\"stderr\":\"Error in lines 1-1\\n\"}︡{\"done\":false,\"stderr\":\"Traceback (most recent call last):\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_server.py\\\", line 905, in execute\\n    exec compile(block+'\\\\n', '', 'single') in namespace, locals\\n  File \\\"\\\", line 1, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 290, in load\\n    exec(preparse_file(open(fpath).read()) + \\\"\\\\n\\\", globals)\\n  File \\\"<string>\\\", line 14, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 290, in load\\n    exec(preparse_file(open(fpath).read()) + \\\"\\\\n\\\", globals)\\n  File \\\"<string>\\\", line 13, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 263, in load\\n    raise IOError('did not find file %r to load or attach' % filename)\\nIOError: did not find file '/home/erelsgl/git/envy-free/Pref.sage' to load or attach\\n\"}︡{\"done\":tru"],[0,"e}\n︠"]],58,58,89,2701]],"time":1446581279468}
{"patch":[[[[0,"3af3"],[1,"r"],[0,"s︠\n"],[-1,""],[0,"load"]],33,33,11,12],[[[0,".sage\")\n"],[1,""],[0,"︡cb0122d"]],54,54,16,16],[[[0,"lse}"],[-1,"︡{\"done\":false,\"stderr\":\"Error in lines 1-1\\n\"}︡{\"done\":false,\"stderr\":\"Traceback (most recent call last):\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_server.py\\\", line 905, in execute\\n    exec compile(block+'\\\\n', '', 'single') in namespace, locals\\n  File \\\"\\\", line 1, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 290, in load\\n    exec(preparse_file(open(fpath).read()) + \\\"\\\\n\\\", globals)\\n  File \\\"<string>\\\", line 14, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 290, in load\\n    exec(preparse_file(open(fpath).read()) + \\\"\\\\n\\\", globals)\\n  File \\\"<string>\\\", line 13, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 263, in load\\n    raise IOError('did not find file %r to load or attach' % filename)\\nIOError: did not find file '/home/erelsgl/git/envy-free/Pref.sage' to load or attach\\n\"}︡{\"done\":true}"],[0,"\n︠d6"]],144,144,2618,8]],"time":1446581248965}
{"patch":[[[[0,"3af3"],[-1,"r"],[0,"s︠\n"],[1,""],[0,"load"]],33,33,12,11],[[[0,"\")\n︡"],[-1,"cb0122d7-1e71-4608-838e-a19215d9e572︡︡{\"stdout\":\"class Pref defined.\\n\","],[1,"76f95228-3459-4f1b-8d44-172bdbcaa5d2︡︡{\"done\":false,\"stderr\":\"Error in lines 1-1\\nTraceback (most recent call last):\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_server.py\\\", line 905, in execute\\n    exec compile(block+'\\\\n', '', 'single') in namespace, locals\\n  File \\\"\\\", line 1, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n\"}︡{\"done\":false,\"stderr\":\"  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 290, in load\\n    exec(preparse_file(open(fpath).read()) + \\\"\\\\n\\\", globals)\\n  File \\\"<string>\\\", line 14, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 263, in load\\n    raise IOError('did not find file %r to load or attach' % filename)\\nIOError: did not find file '/home/erelsgl/git/envy-free/Dict.sage' to load or attach\\n\"}︡{"],[0,"\"done\":"],[-1,"fals"],[1,"tru"],[0,"e}\n︠"]],58,58,91,1914]],"time":1446581247900}
{"patch":[[[[0,"d0253af3"],[-1,"s"],[1,"r"],[0,"︠\nload(\""]],29,29,17,17],[[[0,".sage\")\n"],[1,""],[0,"︡76f9522"]],53,53,16,16],[[[0,"\\n\"}"],[-1,"︡{\"done\":false,\"stderr\":\"  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 290, in load\\n    exec(preparse_file(open(fpath).read()) + \\\"\\\\n\\\", globals)\\n  File \\\"<string>\\\", line 14, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/sage/repl/load.py\\\", line 263, in load\\n    raise IOError('did not find file %r to load or attach' % filename)\\nIOError: did not find file '/home/erelsgl/git/envy-free/Dict.sage' to load or attach\\n\"}︡{\"done\":true}"],[0,"\n︠d6"]],921,921,1053,8]],"time":1446581153566}
{"patch":[[[[0,"3af3"],[-1,"r"],[0,"︠\n"],[1,""],[0,"load"]],33,33,11,10],[[[0,"\")\n︡"],[-1,"76f95228-3459-4f1b-8d44-172bdbcaa5d2︡︡{\"done\":false,\"stderr\":\"Error in lines 1-1\\nTraceback (most recent call last):\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_server.py\\\", line 905, in execute\\n    exec compile(block+'\\\\n', '', 'single') in namespace, locals\\n  File \\\"\\\", line 1, in <module>\\n  File \\\"/projects/sage/sage-6.9/local/lib/python2.7/site-packages/smc_sagews/sage_salvus.py\\\", line 3228, in load\\n    exec 'salvus.namespace[\\\"%s\\\"] = sage.structure.sage_object.load(*__args, **__kwds)'%t in salvus.namespace, {'__args':other_args, '__kwds':kwds}\\n  File \\\"<string>\\\", line 1, in <module>\\n  File \\\"sage/structure/sage_object.pyx\\\", line 983, in sage.structure.sage_object.load (/projects/sage/sage-6.9/src/build/cythonized/sage/structure/sage_object.c:11288)\\n    sage.repl.load.load(filename, globals())\\n\""],[1,"b62d09af-01f8-4f5d-bdf5-56ab721740f3︡︡{\"stdout\":\"class Pref defined.\",\"done\":false}︡{\"stdout\":\"\\n\",\"done\":false}︡{\"done\":true"],[0,"}\n︠d"]],57,57,870,133]],"time":1446581152334}
{"patch":[[[[0,"d(\"4"],[-1,"agents"],[0,".sag"]],42,42,14,8]],"time":1446581147193}
{"patch":[[[[0,"3af3"],[1,"s"],[0,"︠\nload(\""],[-1,"4"],[1,"Pref"],[0,".sag"]],33,33,17,21]],"time":1446581146190}
{"patch":[[[[0,"d0253af3"],[-1,"s"],[1,"r"],[0,"︠\nload(\""]],29,29,17,17],[[[0,"lse}"],[-1,"︡{\"stdout\":\"\\n\",\"done\":false}︡{\"done\":true}"],[0,"\n︠d6"]],138,138,51,8]],"time":1446581111395}
{"patch":[[[[-1,"︠ed6412f1-cdfc-4da0-8339-089dd6a0bad5︠\nload(\"Pref.sage\")\n︡b62d09af-01f8-4f5d-bdf5-56ab721740f3︡︡{\"stdout\":\"class Pref defined.\",\"done\":false}\n︠d66f0a5d-e691-41ba-89b8-d15225264566︠\n"],[1,"load(\"Pref.sage\")"],[0,"\n"]],0,0,183,18]],"time":1446581110158}
{"patch":[[[[0,"ge\")"],[-1,"\n"]],13,13,5,4]],"time":1446581092818}
{"patch":[[[[0,"Pref.sag"],[-1,"e"],[0,"\")"]],6,6,11,10]],"time":1446581091812}
{"patch":[[[[0,"\"Pre"],[-1,"f.sag"],[0,"\")"]],5,5,11,6]],"time":1446581090757}
{"patch":[[[[0,"oad("],[-1,"\"Pre\""],[0,")"]],1,1,10,5]],"time":1446581089719}
{"patch":[[[[0,"load"],[-1,"()"]],0,0,6,4]],"time":1446581089044}
{"patch":[[[[0,"load"],[1," "]],0,0,4,5]],"time":1446580047011}
{"patch":[[[[0,"lo"],[-1,"ad "]],0,0,5,2]],"time":1446580044421}
{"patch":[[[[0,"l"],[-1,"o"]],0,0,2,1]],"time":1446580043425}
{"patch":[[[[-1,"l"]],0,0,1,0]],"time":1446580042435}