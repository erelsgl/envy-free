︠30948c53-04c4-4702-a181-b5dcd0253af3s︠
load("5agents.sage")
︡b225bb32-3ded-4af2-a3b0-b590dcea7177︡︡{"stdout":"class Pref defined.\n4 agents functions loaded. You can run 'prove_4pieces()'\n5 agents functions loaded! You can run 'disprove_5pieces()'\n","done":false}︡{"done":true}
︠6526f052-d624-4a3c-afad-962cbf725d4es︠
disprove_5pieces()
︡7fdd2f3f-e3b8-45ce-9bd1-f16d556abe83︡︡{"stdout":"Initially, agent a cuts five equal pieces:  1,2,3,4,5 .\n\n Consider the case in which the orderings are: b: 1<2<3<4<5   c: 1<2<3<4<5     d: 5<4<3<2<1\n    b:Equalize(2) makes b's best pieces: 4=5b. This may fail in 2 cases : c prefers 5b to 1 2 3 4;  c prefers 4 to 1 2 3 5b .\n     CASE  0  of  2 :  ['c prefers 5b to 1 2 3 4'] :\n      b:Equalize(3) may fail in 1 case : c prefers 3 to 1 2 4bb 5bb .\n       case  0  of  1 :  ['c prefers 5b to 1 2 3 4', 'c prefers 3 to 1 2 4bb 5bb'] :\n        b:Equalize(4) must fail because of d.\n         case  0  of  1 :  ['c prefers 5b to 1 2 3 4', 'c prefers 3 to 1 2 4bb 5bb'] :\n          c:Equalize(2) makes c's best pieces: 4=5c, so globally: 5c<5b . This may fail in 1 case : b prefers 4 to 1 2 3 5c .\n           CASE  0  of  1 :  ['c prefers 5b to 1 2 3 4', 'c prefers 3 to 1 2 4bb 5bb', 'b prefers 4 to 1 2 3 5c'] :\n            c:Equalize(3) always succeeds.\n                          cycles:  [{'b': '(3=4bb=5bb)<5cc<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c prefers 3 to 1 2 4bb 5bb, b prefers 4 to 1 2 3 5c, b prefers 3 to 1 2 4cc 5cc'}]\n     CASE  1  of  2 :  ['c prefers 4 to 1 2 3 5b'] :\n      b:Equalize(3) may fail in 1 case : c prefers 3 to 1 2 4bb 5bb .\n       case  0  of  1 :  ['c prefers 4 to 1 2 3 5b', 'c prefers 3 to 1 2 4bb 5bb'] :\n        b:Equalize(4) must fail because of d.\n         case  0  of  1 :  ['c prefers 4 to 1 2 3 5b', 'c prefers 3 to 1 2 4bb 5bb'] :\n          c:Equalize(2) makes c's best pieces: 4=5c, so globally: 5b<5c . This may fail in 1 case : b prefers 5c to 1 2 3 4 .\n           CASE  0  of  1 :  ['c prefers 4 to 1 2 3 5b', 'c prefers 3 to 1 2 4bb 5bb', 'b prefers 5c to 1 2 3 4'] :\n            c:Equalize(3) always succeeds.\n                          cycles:  [{'b': '(3=4bb=5bb)<5cc<(3=4bb=5bb)', '?': 'c prefers 4 to 1 2 3 5b, c prefers 3 to 1 2 4bb 5bb, b prefers 5c to 1 2 3 4, b prefers 3 to 1 2 4cc 5cc'}]\nSo for these specific orderings, at least one path succeeds.\n\n Consider the case in which the orderings are: b: 1<2<3<4<5   c: 1<2<3<4<5     d: 1<3<2<4<5\n    b:Equalize(2) makes b's best pieces: 4=5b. This may fail in 4 cases : c prefers 5b to 1 2 3 4;  c prefers 4 to 1 2 3 5b;  d prefers 5b to 1 2 3 4;  d prefers 4 to 1 2 3 5b .\n     CASE  0  of  4 :  ['c prefers 5b to 1 2 3 4'] :\n      b:Equalize(3) may fail in 3 cases : c wants 4bb and d wants 5bb;  c wants 5bb and d wants 4bb;  c prefers 3 to 1 2 4bb 5bb .\n       case  0  of  3 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb'] :\n        b:Equalize(4) may fail in 2 cases : c prefers 2 to 1 3bbb 4bbb 5bbb;  d prefers 2 to 1 3bbb 4bbb 5bbb .\n         case  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb'] :\n          c:Equalize(2) makes c's best pieces: 4=5c, so globally: 5c<5b . This may fail in 3 cases : d prefers 5c to 1 2 3 4;  d prefers 4 to 1 2 3 5c;  b prefers 4 to 1 2 3 5c .\n           CASE  0  of  3 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4'] :\n            c:Equalize(3) may fail in 2 cases : d wants 4cc and b wants 5cc;  b prefers 3 to 1 2 4cc 5cc .\n             case  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc'] :\n              c:Equalize(4) may fail in 2 cases : d prefers 2 to 1 3ccc 4ccc 5ccc;  d prefers 2 to 1 3ccc 4ccc 5ccc .\n               case  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc'] :\n                d:Equalize(2) makes d's best pieces: 4=5d, so globally: 5d<5c . This may fail in","done":false}︡{"stdout":" 2 cases : b prefers 4 to 1 3 2 5d;  c prefers 4 to 1 3 2 5d .\n                 CASE  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'b prefers 4 to 1 3 2 5d'] :\n                  d:Equalize(3) always succeeds.\n                                cycles:  [{'b': '(3=4bb=5bb)<4dd<4cc<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, b prefers 4 to 1 3 2 5d, b wants 4dd and c wants 5dd'}, {'c': '(3=4cc=5cc)<4dd<(3=4cc=5cc)', 'b': '(3=4bb=5bb)<5dd<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, b prefers 4 to 1 3 2 5d, b wants 5dd and c wants 4dd'}]\n                 CASE  1  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'c prefers 4 to 1 3 2 5d'] :\n                  d:Equalize(3) always succeeds.\n                                cycles:  [{'b': '(3=4bb=5bb)<4dd<4cc<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, c prefers 4 to 1 3 2 5d, b wants 4dd and c wants 5dd'}, {'c': '(3=4cc=5cc)<4dd<(3=4cc=5cc)', 'b': '(3=4bb=5bb)<5dd<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, c prefers 4 to 1 3 2 5d, b wants 5dd and c wants 4dd'}]\n               case  1  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc'] :\n                d:Equalize(2) makes d's best pieces: 4=5d, so globally: 5d<5c . This may fail in 2 cases : b prefers 4 to 1 3 2 5d;  c prefers 4 to 1 3 2 5d .\n                 CASE  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'b prefers 4 to 1 3 2 5d'] :\n                  d:Equalize(3) always succeeds.\n                                cycles:  [{'b': '(3=4bb=5bb)<4dd<4cc<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, b prefers 4 to 1 3 2 5d, b wants 4dd and c wants 5dd'}, {'c': '(3=4cc=5cc)<4dd<(3=4cc=5cc)', 'b': '(3=4bb=5bb)<5dd<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, b prefers 4 to 1 3 2 5d, b wants 5dd and c wants 4dd'}]\n                 CASE  1  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'd wants 4cc and b wants 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'c prefers 4 to 1 3 2 5d'] :\n                  d:Equalize(3) always succeeds.","done":false}︡{"stdout":"\n                                cycles:  [{'b': '(3=4bb=5bb)<4dd<4cc<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, c prefers 4 to 1 3 2 5d, b wants 4dd and c wants 5dd'}, {'c': '(3=4cc=5cc)<4dd<(3=4cc=5cc)', 'b': '(3=4bb=5bb)<5dd<(3=4bb=5bb)', '?': 'c prefers 5b to 1 2 3 4, c wants 4bb and d wants 5bb, c prefers 2 to 1 3bbb 4bbb 5bbb, d prefers 5c to 1 2 3 4, d wants 4cc and b wants 5cc, d prefers 2 to 1 3ccc 4ccc 5ccc, c prefers 4 to 1 3 2 5d, b wants 5dd and c wants 4dd'}]\n             case  1  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'b prefers 3 to 1 2 4cc 5cc'] :\n              c:Equalize(4) may fail in 2 cases : d prefers 2 to 1 3ccc 4ccc 5ccc;  d prefers 2 to 1 3ccc 4ccc 5ccc .\n               case  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'b prefers 3 to 1 2 4cc 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc'] :\n                d:Equalize(2) makes d's best pieces: 4=5d, so globally: 5d<5c . This may fail in 2 cases : b prefers 4 to 1 3 2 5d;  c prefers 4 to 1 3 2 5d .\n                 CASE  0  of  2 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'b prefers 3 to 1 2 4cc 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'b prefers 4 to 1 3 2 5d'] :\n                  d:Equalize(3) may fail in 1 case : b wants 4dd and c wants 5dd .\n                   case  0  of  1 :  ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'b prefers 3 to 1 2 4cc 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'b prefers 4 to 1 3 2 5d', 'b wants 4dd and c wants 5dd'] :\n                    d:Equalize(4) may fail in 2 cases : b prefers 3 to 1 2ddd 4ddd 5ddd;  c prefers 3 to 1 2ddd 4ddd 5ddd .\n\n\n*** Failure! \n\n\nThe claim is not proved! It is false, for example, in the following case:\n{'c': 1<2 2<3 3<4 4<5 1<5b 2<5b 3<5b 4<5b 1<4bb 2<4bb 3<4bb 5bb<4bb 1<2 3bbb<2 4bbb<2 5bbb<2 1<5dd 3<5dd 2<5dd 4dd<5dd 4=5c 3=4cc=5cc 2=3ccc=4ccc=5ccc , '*': 5b<5 5bb<5b 4bb<4 5bbb<5bb 4bbb<4bb 3bbb<3 5c<5 5c<5b 5cc<5c 4cc<4 4cc<4bb 5ccc<5cc 4ccc<4cc 3ccc<3 3bbb<3ccc 4bbb<4ccc 5bbb<5ccc 5d<5 5d<5c 5dd<5d 4dd<4 4ccc<4dd 5ccc<5dd 5dd<5bb 5ddd<5dd 4ddd<4dd 2ddd<2 , 'b': 1<2 2<3 3<4 4<5 1<3 2<3 4cc<3 5cc<3 1<4 3<4 2<4 5d<4 1<4dd 3<4dd 2<4dd 5dd<4dd 1<3 2ddd<3 4ddd<3 5ddd<3 4=5b 3=4bb=5bb 2=3bbb=4bbb=5bbb , 'd': 1<3 3<2 2<4 4<5 1<5bb 2<5bb 3<5bb 4bb<5bb 1<5c 2<5c 3<5c 4<5c 1<2 3ccc<2 4ccc<2 5ccc<2 4=5d 2=4dd=5dd 3=2ddd=4ddd=5ddd , '?': ['c prefers 5b to 1 2 3 4', 'c wants 4bb and d wants 5bb', 'c prefers 2 to 1 3bbb 4bbb 5bbb', 'd prefers 5c to 1 2 3 4', 'b prefers 3 to 1 2 4cc 5cc', 'd prefers 2 to 1 3ccc 4ccc 5ccc', 'b prefers 4 to 1 3 2 5d', 'b wants 4dd and c wants 5dd', 'b prefers 3 to 1 2ddd 4ddd 5ddd']}\n","done":false}︡{"done":true}
︠fd82f05e-4e57-455e-bf7c-716831577f67s︠
︡0200fe03-8492-45f5-a81e-37601291f233︡︡{"done":true}
︠2a4e9318-cd2c-4bdb-83b3-73e7d4dc61b7︠









